"""
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞.
    ‚óã –ò—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –§–ò–û –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤.
    ‚óã –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞ CSV –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã.
    ‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 2 –¥–æ 5) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (–æ—Ç 0 –¥–æ 100).
    ‚óã –¢–∞–∫–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
      –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.
"""

import csv
import os


class NameValidator:
    def __get__(self, instance, owner):
        return instance._name

    def __set__(self, instance, value):
        if not all(i.isalpha() for i in value.split()):
            raise ValueError("Name should contain only letters.")
        if not all(i.istitle() for i in value.split()):
            raise ValueError("Name should start with an uppercase letter.")
        instance._name = value


class Student:
    name = NameValidator()

    def __init__(self, name, subjects_file):
        self.name = name
        if os.path.exists(subjects_file):
            self.subjects = self.load_sub(subjects_file)
            self.scores = {subject: {"grades": [], "test_results": []} for subject in self.subjects}
        else:
            self.subjects = []
            self.scores = {}

    def load_sub(self, subjects_file):
        with open(subjects_file, 'r') as file:
            reader = csv.reader(file)
            subjects = next(reader)
        return subjects

    def __call__(self, subject, grade, test_result):
        if subject not in self.subjects:
            raise ValueError(f"{subject} is not a valid subject.")
        if grade < 2 or grade > 5:
            raise ValueError("Grade should be between 2 and 5.")
        if test_result < 0 or test_result > 100:
            raise ValueError("Test result should be between 0 and 100.")
        self.scores[subject]["grades"].append(grade)
        self.scores[subject]["test_results"].append(test_result)

    def calc_average_test_score(self, subject):
        if subject not in self.subjects:
            raise ValueError(f"{subject} is not a valid subject.")
        test_results = self.scores[subject]["test_results"]
        if not test_results:
            return 0
        return sum(test_results) / len(test_results)

    def calc_average_grade(self):
        total_grades = []
        total_subjects = 0
        for subject in self.subjects:
            total_grades.extend(self.scores[subject]["grades"])
            total_subjects += len(self.scores[subject]["grades"])
        if not total_grades:
            return 0
        return sum(total_grades) / total_subjects


student = Student("Ivan Ivanovich Ivanov", "subjects.csv")

student("Math", 4, 80)
student("Math", 5, 90)
student("Informatics", 5, 90)
student("Physics", 3, 70)
student("History", 4, 85)

print("Name:", student.name)
print("Subjects:", student.subjects)
print("Math average test score:", student.calc_average_test_score("Math"))
print("Overall average grade:", student.calc_average_grade())
print(student.scores)




#
#
#
#
# class Range:
#     def __init__(self, min_value: int = None, max_value: int = None):
#         self.min_value = min_value
#         self.max_value = max_value
#
#     def __set_name__(self, owner, name):
#         self.param_name = '_' + name
#
#     def __get__(self, instance, owner):
#         return getattr(instance, self.param_name)
#
#     def __set__(self, instance, value):
#         self.validate(value)
#         setattr(instance, self.param_name, value)
#
#     def __delete__(self, instance):
#         raise AttributeError(f'–°–≤–æ–π—Å—Ç–≤–æ "{self.param_name}" –Ω–µ–ª—å–∑—è—É–¥–∞–ª—è—Ç—å')
#
#     def validate(self, value):
#         if not isinstance(value, int):
#             raise TypeError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–ºc—á–∏—Å–ª–æ–º')
#         if self.min_value is not None and value < self.min_value:
#             raise ValueError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –∏–ª–∏ —Ä–∞–≤–Ω–æ {self.min_value}')
#         if self.max_value is not None and value >= self.max_value:
#             raise ValueError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ {self.max_value}')
#
#
# class Student:
#     age = Range(3, 103)
#     grade = Range(1, 11 + 1)
#     office = Range(3, 42 + 1)
#
#     def __init__(self, last_name, first_name, first_name, subject):
#         self.last_name = last_name
#         self.first_name = first_name
#         self.first_name = first_name
#         self.subject = subject
#
#     def __repr__(self):
#         return f'Student(name={self.name}, age={self.age}, grade={self.grade}, office={self.office})'
#
#
# if __name__ == '__main__':
#     std_one = Student('–ê—Ä—Ö–∏–º–µ–¥', 12, 4, 29)
#     std_other = Student('–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å', 2406, 5, 17) # ValueError: –ó–Ω–∞—á–µ–Ω–∏–µ 2406 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 103
#     print(f'{std_one = }')
#     std_one.age = 15
#     print(f'{std_one = }')
#     std_one.grade = 11.0 # TypeError: –ó–Ω–∞—á–µ–Ω–∏–µ 11.0 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
#     std_one.office = 73 # ValueError: –ó–Ω–∞—á–µ–Ω–∏–µ 73 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 42
#
#     del std_one.age # AttributeError: –°–≤–æ–π—Å—Ç–≤–æ "_age" –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å
#     print(f'{std_one.__dict__ = }')
